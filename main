import numpy as np
import tensorflow as tf
from tensorflow.keras.utils import to_categorical
import os
import matplotlib.pyplot as plt
import random

# 1. 读取 .idx 文件的函数
def load_images(file_path):
    with open(file_path, 'rb') as f:
        _ = int.from_bytes(f.read(4), 'big')  # magic number
        num_images = int.from_bytes(f.read(4), 'big')
        rows = int.from_bytes(f.read(4), 'big')
        cols = int.from_bytes(f.read(4), 'big')
        images = np.frombuffer(f.read(), dtype=np.uint8).reshape(num_images, rows, cols, 1)
        return images / 255.0  # 归一化

def load_labels(file_path):
    with open(file_path, 'rb') as f:
        _ = int.from_bytes(f.read(4), 'big')  # magic number
        num_labels = int.from_bytes(f.read(4), 'big')
        labels = np.frombuffer(f.read(), dtype=np.uint8)
        return to_categorical(labels, 10)  # one-hot 编码

# 2. 加载 MNIST 数据
data_path = r"F:\MNIST\mnist_dataset"  # 请确保此路径存在且为纯英文
x_train = load_images(os.path.join(data_path, "train-images.idx3-ubyte"))
y_train = load_labels(os.path.join(data_path, "train-labels.idx1-ubyte"))

x_test = load_images(os.path.join(data_path, "t10k-images.idx3-ubyte"))
y_test = load_labels(os.path.join(data_path, "t10k-labels.idx1-ubyte"))

# 3. 构建 CNN 模型
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, kernel_size=(5, 5), activation='relu', padding='same', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2), padding='same'),
    tf.keras.layers.Conv2D(64, kernel_size=(5, 5), activation='relu', padding='same'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2), padding='same'),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(1024, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(10, activation='softmax')
])

# 4. 编译模型
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# 5. 训练模型
model.fit(x_train, y_train, batch_size=50, epochs=5, validation_split=0.1)

# 6. 测试模型
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"测试准确率: {test_acc:.4f}")

# 7. 保存模型
model_path = r"D:\PycharmProjects\pythonProject\code\shouxieshuzishibie\mnist_model_from_custom_files.h5"
model.save(model_path)

# 8. 重新加载模型（确认路径一致）
if os.path.exists(model_path):
    model = tf.keras.models.load_model(model_path)
    print("模型加载成功。")
else:
    raise FileNotFoundError(f"模型文件未找到: {model_path}")

# 9. 随机选取测试样本进行预测并可视化
num_samples = 10
indices = random.sample(range(len(x_test)), num_samples)

x_sample = x_test[indices]
y_sample = y_test[indices]

predictions = model.predict(x_sample)

# 10. 可视化结果
plt.figure(figsize=(12, 4))
for i in range(num_samples):
    plt.subplot(2, 5, i + 1)
    plt.imshow(x_sample[i].reshape(28, 28), cmap='gray')
    plt.title(f"预测: {np.argmax(predictions[i])}")
    plt.axis('off')

plt.tight_layout()
plt.show()
